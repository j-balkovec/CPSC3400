[
    {
        "author": "Jakob Balkovec",
        "timestamp": "2024-02-24 13:37:05"
    },
    {
        "test_regex_pattern_a": [
            {
                "string": "quizzical",
                "match": true
            },
            {
                "string": "quzziical",
                "match": true
            },
            {
                "string": "zzquizzical",
                "match": true
            },
            {
                "string": "aaquapizza",
                "match": true
            },
            {
                "string": "aquataco",
                "match": false
            },
            {
                "string": "quizz1cal",
                "match": false
            },
            {
                "string": "QUIZZICAL",
                "match": false
            }
        ],
        "test_regex_pattern_b": [
            {
                "string": "(555)123-4567",
                "match": true
            },
            {
                "string": "(555) 123-4567",
                "match": true
            },
            {
                "string": "555-123-4567",
                "match": true
            },
            {
                "string": "555123-4567",
                "match": false
            },
            {
                "string": "555 123-4567",
                "match": false
            },
            {
                "string": "555-1234-567",
                "match": false
            },
            {
                "string": "555-123-456",
                "match": false
            },
            {
                "string": "abc-def-ghij",
                "match": false
            }
        ],
        "test_regex_pattern_c": [
            {
                "string": "[1]",
                "match": true
            },
            {
                "string": "[1; 4; 6; 12; 3; 70]",
                "match": true
            },
            {
                "string": "[1;4;6;12;3;70]",
                "match": true
            },
            {
                "string": "[0; 10; 20; 30; 40; 50]",
                "match": true
            },
            {
                "string": "[1 ; 4 ; 6 ; 12 ; 3 ; 70]",
                "match": true
            },
            {
                "string": "[1;                 4]",
                "match": true
            },
            {
                "string": "[1; 4; 6; 12; 3; 70;]",
                "match": false
            },
            {
                "string": "[1; 4; 06; 12; 3; 70]",
                "match": false
            },
            {
                "string": "[1; 4; 6; 12; 3; abc]",
                "match": false
            },
            {
                "string": "[]",
                "match": false
            },
            {
                "string": "[1; 2; 3; 4]  ",
                "match": false
            },
            {
                "string": "[string; int; 4]",
                "match": false
            },
            {
                "string": "[1, 2, 3, 4, 5]",
                "match": false
            }
        ],
        "test_regex_pattern_d": [
            {
                "expression": "a < b ? x : 3 + y",
                "expected_result": " x if a < b else 3 + y",
                "actual_result": " x if a < b else 3 + y",
                "match": true
            },
            {
                "expression": "1 > 2 ? 'a' : 'b'",
                "expected_result": " 'a' if 1 > 2 else 'b'",
                "actual_result": " 'a' if 1 > 2 else 'b'",
                "match": true
            },
            {
                "expression": "condition ? result1 : result2",
                "expected_result": " result1 if condition else result2",
                "actual_result": " result1 if condition else result2",
                "match": true
            },
            {
                "expression": "foo ? 'bar' : 'baz'",
                "expected_result": " 'bar' if foo else 'baz'",
                "actual_result": " 'bar' if foo else 'baz'",
                "match": true
            },
            {
                "expression": "a == b ? 1 : 2",
                "expected_result": " 1 if a == b else 2",
                "actual_result": " 1 if a == b else 2",
                "match": true
            },
            {
                "expression": "(a + b) < (c - d) ? x : y",
                "expected_result": " x if (a + b) < (c - d) else y",
                "actual_result": " x if (a + b) < (c - d) else y",
                "match": true
            },
            {
                "expression": "x > 0 ? 1 : 0",
                "expected_result": " 1 if x > 0 else 0",
                "actual_result": " 1 if x > 0 else 0",
                "match": true
            }
        ]
    }
]